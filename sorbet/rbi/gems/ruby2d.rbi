# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby2d/all/ruby2d.rbi
#
# ruby2d-0.11.0

class String
  def bold; end
  def error; end
  def info; end
  def ruby2d_colorize(c); end
  def warn; end
end
module Ruby2D
  def draw; end
  def render; end
  def self.assets; end
  def self.assets=(path); end
  def self.ext_base_path; end
end
class Ruby2D::Error < StandardError
end
module Ruby2D::Renderable
  def add; end
  def color; end
  def color=(c); end
  def colour; end
  def colour=(c); end
  def contains?(x, y); end
  def height; end
  def remove; end
  def width; end
  def x; end
  def y; end
  def z; end
  def z=(z); end
end
class Ruby2D::Color
  def a; end
  def a=(arg0); end
  def b; end
  def b=(arg0); end
  def g; end
  def g=(arg0); end
  def hex_to_f(h); end
  def initialize(c); end
  def opacity; end
  def opacity=(opacity); end
  def r; end
  def r=(arg0); end
  def self.is_hex?(s); end
  def self.is_valid?(c); end
  def self.set(colors); end
  def to_f(a); end
end
class Ruby2D::Color::Set
  def [](i); end
  def initialize(colors); end
  def length; end
  def opacity; end
  def opacity=(opacity); end
end
class Ruby2D::Window
  def add(o); end
  def add_controller_mappings; end
  def add_object(o); end
  def clear; end
  def close; end
  def controller_axis(axis); end
  def controller_button_down(btn); end
  def controller_button_up(btn); end
  def controller_callback(which, type, axis, value, button); end
  def ext_add_controller_mappings(arg0); end
  def ext_close; end
  def ext_diagnostics(arg0); end
  def ext_get_display_dimensions; end
  def ext_screenshot(arg0); end
  def ext_show; end
  def get(sym, opts = nil); end
  def initialize(args = nil); end
  def key_callback(type, key); end
  def key_down(key); end
  def key_held(key); end
  def key_up(key); end
  def mouse_callback(type, button, direction, x, y, delta_x, delta_y); end
  def mouse_down(btn); end
  def mouse_move; end
  def mouse_scroll; end
  def mouse_up(btn); end
  def new_event_key; end
  def off(event_descriptor); end
  def on(event, &proc); end
  def remove(o); end
  def render(&proc); end
  def render_callback; end
  def screenshot(path); end
  def self.add(o); end
  def self.background; end
  def self.borderless; end
  def self.clear; end
  def self.close; end
  def self.current; end
  def self.diagnostics; end
  def self.display_height; end
  def self.display_width; end
  def self.fps; end
  def self.fps_cap; end
  def self.frames; end
  def self.fullscreen; end
  def self.get(sym, opts = nil); end
  def self.height; end
  def self.highdpi; end
  def self.mouse_x; end
  def self.mouse_y; end
  def self.off(event_descriptor); end
  def self.on(event, &proc); end
  def self.remove(o); end
  def self.render(&proc); end
  def self.render_ready_check; end
  def self.resizable; end
  def self.screenshot(opts = nil); end
  def self.set(opts); end
  def self.show; end
  def self.title; end
  def self.update(&proc); end
  def self.viewport_height; end
  def self.viewport_width; end
  def self.width; end
  def set(opts); end
  def show; end
  def update(&proc); end
  def update_callback; end
end
class Ruby2D::Window::EventDescriptor < Struct
  def id; end
  def id=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
end
class Ruby2D::Window::MouseEvent < Struct
  def button; end
  def button=(_); end
  def delta_x; end
  def delta_x=(_); end
  def delta_y; end
  def delta_y=(_); end
  def direction; end
  def direction=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
end
class Ruby2D::Window::KeyEvent < Struct
  def key; end
  def key=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
end
class Ruby2D::Window::ControllerEvent < Struct
  def axis; end
  def axis=(_); end
  def button; end
  def button=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
  def value; end
  def value=(_); end
  def which; end
  def which=(_); end
end
class Ruby2D::Window::ControllerAxisEvent < Struct
  def axis; end
  def axis=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def value; end
  def value=(_); end
  def which; end
  def which=(_); end
end
class Ruby2D::Window::ControllerButtonEvent < Struct
  def button; end
  def button=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def which; end
  def which=(_); end
end
module Ruby2D::DSL
  def clear; end
  def close; end
  def get(sym, opts = nil); end
  def off(event_descriptor); end
  def on(event, &proc); end
  def render(&proc); end
  def self.window; end
  def self.window=(w); end
  def set(opts); end
  def show; end
  def update(&proc); end
end
class Ruby2D::Entity
  def add; end
  def remove; end
end
class Ruby2D::Quad
  def c1; end
  def c1=(arg0); end
  def c2; end
  def c2=(arg0); end
  def c3; end
  def c3=(arg0); end
  def c4; end
  def c4=(arg0); end
  def color=(c); end
  def contains?(x, y); end
  def initialize(opts = nil); end
  def render; end
  def self.draw(opts = nil); end
  def self.ext_draw(arg0); end
  def triangle_area(x1, y1, x2, y2, x3, y3); end
  def update_color(c); end
  def x1; end
  def x1=(arg0); end
  def x2; end
  def x2=(arg0); end
  def x3; end
  def x3=(arg0); end
  def x4; end
  def x4=(arg0); end
  def y1; end
  def y1=(arg0); end
  def y2; end
  def y2=(arg0); end
  def y3; end
  def y3=(arg0); end
  def y4; end
  def y4=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Line
  def color=(c); end
  def contains?(x, y); end
  def initialize(opts = nil); end
  def length; end
  def points_distance(x1, y1, x2, y2); end
  def render; end
  def self.draw(opts = nil); end
  def self.ext_draw(arg0); end
  def update_color(c); end
  def width; end
  def width=(arg0); end
  def x1; end
  def x1=(arg0); end
  def x2; end
  def x2=(arg0); end
  def y1; end
  def y1=(arg0); end
  def y2; end
  def y2=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Circle
  def contains?(x, y); end
  def initialize(opts = nil); end
  def radius; end
  def radius=(arg0); end
  def render; end
  def sectors; end
  def sectors=(arg0); end
  def self.draw(opts = nil); end
  def self.ext_draw(arg0); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Rectangle < Ruby2D::Quad
  def height=(h); end
  def initialize(opts = nil); end
  def self.draw(opts = nil); end
  def update_coords(x, y, w, h); end
  def width=(w); end
  def x=(x); end
  def y=(y); end
end
class Ruby2D::Square < Ruby2D::Rectangle
  def height=(h); end
  def initialize(opts = nil); end
  def self.draw(opts = nil); end
  def size; end
  def size=(s); end
  def width=(w); end
end
class Ruby2D::Triangle
  def c1; end
  def c1=(arg0); end
  def c2; end
  def c2=(arg0); end
  def c3; end
  def c3=(arg0); end
  def color=(c); end
  def contains?(x, y); end
  def initialize(opts = nil); end
  def render; end
  def self.draw(opts = nil); end
  def self.ext_draw(arg0); end
  def triangle_area(x1, y1, x2, y2, x3, y3); end
  def update_color(c); end
  def x1; end
  def x1=(arg0); end
  def x2; end
  def x2=(arg0); end
  def x3; end
  def x3=(arg0); end
  def y1; end
  def y1=(arg0); end
  def y2; end
  def y2=(arg0); end
  def y3; end
  def y3=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Pixel
  def self.draw(opts = nil); end
  def self.ext_draw(arg0); end
end
class Ruby2D::Image
  def data; end
  def data=(arg0); end
  def draw(opts = nil); end
  def height; end
  def height=(arg0); end
  def initialize(path, opts = nil); end
  def path; end
  def render(x: nil, y: nil, width: nil, height: nil, color: nil, rotate: nil); end
  def rotate; end
  def rotate=(arg0); end
  def self.ext_load_image(arg0); end
  def self.load_image(path); end
  def width; end
  def width=(arg0); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Sprite
  def clip_height; end
  def clip_height=(arg0); end
  def clip_width; end
  def clip_width=(arg0); end
  def clip_x; end
  def clip_x=(arg0); end
  def clip_y; end
  def clip_y=(arg0); end
  def data; end
  def data=(arg0); end
  def draw(opts = nil); end
  def elapsed_time; end
  def flip_sprite(flip); end
  def height; end
  def height=(arg0); end
  def initialize(path, opts = nil); end
  def loop; end
  def loop=(arg0); end
  def path; end
  def play(opts = nil, &done_proc); end
  def render(x: nil, y: nil, width: nil, height: nil, color: nil, rotate: nil, flip: nil, crop: nil); end
  def reset_clipping_rect; end
  def restart_time; end
  def rotate; end
  def rotate=(arg0); end
  def set_frame; end
  def stop(animation = nil); end
  def update; end
  def width; end
  def width=(arg0); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Tileset
  def clear_tiles; end
  def define_tile(name, x, y, rotate: nil, flip: nil); end
  def initialize(path, opts = nil); end
  def set_tile(name, coordinates); end
  include Ruby2D::Renderable
end
class Ruby2D::Font
  def initialize(path, size, style = nil); end
  def self.all; end
  def self.all_paths; end
  def self.default; end
  def self.directory; end
  def self.ext_load(arg0, arg1, arg2); end
  def self.load(path, size, style = nil); end
  def self.path(font_name); end
  def ttf_font; end
end
class Ruby2D::Text
  def create_font; end
  def create_texture; end
  def data; end
  def data=(arg0); end
  def draw(opts = nil); end
  def font; end
  def initialize(text, opts = nil); end
  def render(x: nil, y: nil, color: nil, rotate: nil); end
  def rotate; end
  def rotate=(arg0); end
  def self.ext_load_text(arg0, arg1); end
  def size; end
  def size=(size); end
  def text; end
  def text=(msg); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
  include Ruby2D::Renderable
end
class Ruby2D::Sound
  def data; end
  def data=(arg0); end
  def ext_get_volume; end
  def ext_init(arg0); end
  def ext_length; end
  def ext_play; end
  def ext_set_volume(arg0); end
  def initialize(path); end
  def length; end
  def path; end
  def play; end
  def self.ext_get_mix_volume; end
  def self.ext_set_mix_volume(arg0); end
  def self.mix_volume; end
  def self.mix_volume=(v); end
  def volume; end
  def volume=(v); end
end
class Ruby2D::Music
  def data; end
  def data=(arg0); end
  def ext_fadeout(arg0); end
  def ext_init(arg0); end
  def ext_length; end
  def ext_pause; end
  def ext_play; end
  def ext_resume; end
  def ext_stop; end
  def fadeout(ms); end
  def initialize(path, opts = nil); end
  def length; end
  def loop; end
  def loop=(arg0); end
  def path; end
  def pause; end
  def play; end
  def resume; end
  def self.ext_get_volume; end
  def self.ext_set_volume(arg0); end
  def self.volume; end
  def self.volume=(v); end
  def stop; end
  def volume; end
  def volume=(v); end
end
class Ruby2D::Texture
  def delete; end
  def draw(coordinates, texture_coordinates, color); end
  def ext_create(arg0, arg1, arg2); end
  def ext_delete(arg0); end
  def ext_draw(arg0, arg1, arg2, arg3); end
  def height; end
  def initialize(pixel_data, width, height); end
  def texture_id; end
  def width; end
end
class Ruby2D::Vertices
  def coordinates; end
  def initialize(x, y, width, height, rotate, crop: nil, flip: nil); end
  def rotate(x, y); end
  def texture_coordinates; end
end
